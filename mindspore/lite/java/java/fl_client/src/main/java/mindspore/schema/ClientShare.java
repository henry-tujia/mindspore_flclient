// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ClientShare extends Table {
  public static ClientShare getRootAsClientShare(ByteBuffer _bb) { return getRootAsClientShare(_bb, new ClientShare()); }
  public static ClientShare getRootAsClientShare(ByteBuffer _bb, ClientShare obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ClientShare __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String flId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer flIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int share(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int shareLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer shareAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer shareInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int index() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createClientShare(FlatBufferBuilder builder,
      int fl_idOffset,
      int shareOffset,
      int index) {
    builder.startObject(3);
    ClientShare.addIndex(builder, index);
    ClientShare.addShare(builder, shareOffset);
    ClientShare.addFlId(builder, fl_idOffset);
    return ClientShare.endClientShare(builder);
  }

  public static void startClientShare(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addFlId(FlatBufferBuilder builder, int flIdOffset) { builder.addOffset(0, flIdOffset, 0); }
  public static void addShare(FlatBufferBuilder builder, int shareOffset) { builder.addOffset(1, shareOffset, 0); }
  public static int createShareVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startShareVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addIndex(FlatBufferBuilder builder, int index) { builder.addInt(2, index, 0); }
  public static int endClientShare(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

