// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RequestExchangeKeys extends Table {
  public static RequestExchangeKeys getRootAsRequestExchangeKeys(ByteBuffer _bb) { return getRootAsRequestExchangeKeys(_bb, new RequestExchangeKeys()); }
  public static RequestExchangeKeys getRootAsRequestExchangeKeys(ByteBuffer _bb, RequestExchangeKeys obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RequestExchangeKeys __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String flId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer flIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int cPk(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int cPkLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer cPkAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer cPkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int sPk(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int sPkLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer sPkAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer sPkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public int iteration() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String timestamp() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public int indIv(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int indIvLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer indIvAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer indIvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public int pwIv(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int pwIvLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer pwIvAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer pwIvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  public int pwSalt(int j) { int o = __offset(18); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int pwSaltLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer pwSaltAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer pwSaltInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static int createRequestExchangeKeys(FlatBufferBuilder builder,
      int fl_idOffset,
      int c_pkOffset,
      int s_pkOffset,
      int iteration,
      int timestampOffset,
      int ind_ivOffset,
      int pw_ivOffset,
      int pw_saltOffset) {
    builder.startObject(8);
    RequestExchangeKeys.addPwSalt(builder, pw_saltOffset);
    RequestExchangeKeys.addPwIv(builder, pw_ivOffset);
    RequestExchangeKeys.addIndIv(builder, ind_ivOffset);
    RequestExchangeKeys.addTimestamp(builder, timestampOffset);
    RequestExchangeKeys.addIteration(builder, iteration);
    RequestExchangeKeys.addSPk(builder, s_pkOffset);
    RequestExchangeKeys.addCPk(builder, c_pkOffset);
    RequestExchangeKeys.addFlId(builder, fl_idOffset);
    return RequestExchangeKeys.endRequestExchangeKeys(builder);
  }

  public static void startRequestExchangeKeys(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addFlId(FlatBufferBuilder builder, int flIdOffset) { builder.addOffset(0, flIdOffset, 0); }
  public static void addCPk(FlatBufferBuilder builder, int cPkOffset) { builder.addOffset(1, cPkOffset, 0); }
  public static int createCPkVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCPkVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addSPk(FlatBufferBuilder builder, int sPkOffset) { builder.addOffset(2, sPkOffset, 0); }
  public static int createSPkVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startSPkVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addIteration(FlatBufferBuilder builder, int iteration) { builder.addInt(3, iteration, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(4, timestampOffset, 0); }
  public static void addIndIv(FlatBufferBuilder builder, int indIvOffset) { builder.addOffset(5, indIvOffset, 0); }
  public static int createIndIvVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startIndIvVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addPwIv(FlatBufferBuilder builder, int pwIvOffset) { builder.addOffset(6, pwIvOffset, 0); }
  public static int createPwIvVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startPwIvVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addPwSalt(FlatBufferBuilder builder, int pwSaltOffset) { builder.addOffset(7, pwSaltOffset, 0); }
  public static int createPwSaltVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startPwSaltVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endRequestExchangeKeys(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

