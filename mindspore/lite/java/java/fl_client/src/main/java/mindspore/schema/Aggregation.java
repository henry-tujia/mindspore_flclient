// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Aggregation extends Table {
  public static Aggregation getRootAsAggregation(ByteBuffer _bb) { return getRootAsAggregation(_bb, new Aggregation()); }
  public static Aggregation getRootAsAggregation(ByteBuffer _bb, Aggregation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Aggregation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public float weights(int j) { int o = __offset(6); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int weightsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer weightsAsByteBuffer() { return __vector_as_bytebuffer(6, 4); }
  public ByteBuffer weightsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 4); }

  public static int createAggregation(FlatBufferBuilder builder,
      byte type,
      int weightsOffset) {
    builder.startObject(2);
    Aggregation.addWeights(builder, weightsOffset);
    Aggregation.addType(builder, type);
    return Aggregation.endAggregation(builder);
  }

  public static void startAggregation(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addWeights(FlatBufferBuilder builder, int weightsOffset) { builder.addOffset(1, weightsOffset, 0); }
  public static int createWeightsVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startWeightsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAggregation(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

