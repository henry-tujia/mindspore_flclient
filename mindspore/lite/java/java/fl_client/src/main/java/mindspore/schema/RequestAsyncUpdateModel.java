// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RequestAsyncUpdateModel extends Table {
  public static RequestAsyncUpdateModel getRootAsRequestAsyncUpdateModel(ByteBuffer _bb) { return getRootAsRequestAsyncUpdateModel(_bb, new RequestAsyncUpdateModel()); }
  public static RequestAsyncUpdateModel getRootAsRequestAsyncUpdateModel(ByteBuffer _bb, RequestAsyncUpdateModel obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RequestAsyncUpdateModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String flName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer flNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String flId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer flIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int iteration() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int dataSize() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public FeatureMap featureMap(int j) { return featureMap(new FeatureMap(), j); }
  public FeatureMap featureMap(FeatureMap obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int featureMapLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }

  public static int createRequestAsyncUpdateModel(FlatBufferBuilder builder,
      int fl_nameOffset,
      int fl_idOffset,
      int iteration,
      int data_size,
      int feature_mapOffset) {
    builder.startObject(5);
    RequestAsyncUpdateModel.addFeatureMap(builder, feature_mapOffset);
    RequestAsyncUpdateModel.addDataSize(builder, data_size);
    RequestAsyncUpdateModel.addIteration(builder, iteration);
    RequestAsyncUpdateModel.addFlId(builder, fl_idOffset);
    RequestAsyncUpdateModel.addFlName(builder, fl_nameOffset);
    return RequestAsyncUpdateModel.endRequestAsyncUpdateModel(builder);
  }

  public static void startRequestAsyncUpdateModel(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addFlName(FlatBufferBuilder builder, int flNameOffset) { builder.addOffset(0, flNameOffset, 0); }
  public static void addFlId(FlatBufferBuilder builder, int flIdOffset) { builder.addOffset(1, flIdOffset, 0); }
  public static void addIteration(FlatBufferBuilder builder, int iteration) { builder.addInt(2, iteration, 0); }
  public static void addDataSize(FlatBufferBuilder builder, int dataSize) { builder.addInt(3, dataSize, 0); }
  public static void addFeatureMap(FlatBufferBuilder builder, int featureMapOffset) { builder.addOffset(4, featureMapOffset, 0); }
  public static int createFeatureMapVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFeatureMapVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRequestAsyncUpdateModel(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

