// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FLPlan extends Table {
  public static FLPlan getRootAsFLPlan(ByteBuffer _bb) { return getRootAsFLPlan(_bb, new FLPlan()); }
  public static FLPlan getRootAsFLPlan(ByteBuffer _bb, FLPlan obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public FLPlan __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String serverMode() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serverModeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer serverModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String flName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer flNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int iterations() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int epochs() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public EarlyStop earlyStop() { return earlyStop(new EarlyStop()); }
  public EarlyStop earlyStop(EarlyStop obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int miniBatch() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean shuffle() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public float lr() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public Aggregation aggregation() { return aggregation(new Aggregation()); }
  public Aggregation aggregation(Aggregation obj) { int o = __offset(20); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte metrics(int j) { int o = __offset(22); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int metricsLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer metricsAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer metricsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  public CipherPublicParams cipher() { return cipher(new CipherPublicParams()); }
  public CipherPublicParams cipher(CipherPublicParams obj) { int o = __offset(24); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createFLPlan(FlatBufferBuilder builder,
      int server_modeOffset,
      int fl_nameOffset,
      int iterations,
      int epochs,
      int early_stopOffset,
      int mini_batch,
      boolean shuffle,
      float lr,
      int aggregationOffset,
      int metricsOffset,
      int cipherOffset) {
    builder.startObject(11);
    FLPlan.addCipher(builder, cipherOffset);
    FLPlan.addMetrics(builder, metricsOffset);
    FLPlan.addAggregation(builder, aggregationOffset);
    FLPlan.addLr(builder, lr);
    FLPlan.addMiniBatch(builder, mini_batch);
    FLPlan.addEarlyStop(builder, early_stopOffset);
    FLPlan.addEpochs(builder, epochs);
    FLPlan.addIterations(builder, iterations);
    FLPlan.addFlName(builder, fl_nameOffset);
    FLPlan.addServerMode(builder, server_modeOffset);
    FLPlan.addShuffle(builder, shuffle);
    return FLPlan.endFLPlan(builder);
  }

  public static void startFLPlan(FlatBufferBuilder builder) { builder.startObject(11); }
  public static void addServerMode(FlatBufferBuilder builder, int serverModeOffset) { builder.addOffset(0, serverModeOffset, 0); }
  public static void addFlName(FlatBufferBuilder builder, int flNameOffset) { builder.addOffset(1, flNameOffset, 0); }
  public static void addIterations(FlatBufferBuilder builder, int iterations) { builder.addInt(2, iterations, 0); }
  public static void addEpochs(FlatBufferBuilder builder, int epochs) { builder.addInt(3, epochs, 0); }
  public static void addEarlyStop(FlatBufferBuilder builder, int earlyStopOffset) { builder.addOffset(4, earlyStopOffset, 0); }
  public static void addMiniBatch(FlatBufferBuilder builder, int miniBatch) { builder.addInt(5, miniBatch, 0); }
  public static void addShuffle(FlatBufferBuilder builder, boolean shuffle) { builder.addBoolean(6, shuffle, false); }
  public static void addLr(FlatBufferBuilder builder, float lr) { builder.addFloat(7, lr, 0.0f); }
  public static void addAggregation(FlatBufferBuilder builder, int aggregationOffset) { builder.addOffset(8, aggregationOffset, 0); }
  public static void addMetrics(FlatBufferBuilder builder, int metricsOffset) { builder.addOffset(9, metricsOffset, 0); }
  public static int createMetricsVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startMetricsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addCipher(FlatBufferBuilder builder, int cipherOffset) { builder.addOffset(10, cipherOffset, 0); }
  public static int endFLPlan(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

