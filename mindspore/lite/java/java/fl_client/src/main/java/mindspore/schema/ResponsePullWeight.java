// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ResponsePullWeight extends Table {
  public static ResponsePullWeight getRootAsResponsePullWeight(ByteBuffer _bb) { return getRootAsResponsePullWeight(_bb, new ResponsePullWeight()); }
  public static ResponsePullWeight getRootAsResponsePullWeight(ByteBuffer _bb, ResponsePullWeight obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ResponsePullWeight __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int retcode() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String reason() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reasonAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer reasonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int iteration() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public FeatureMap featureMap(int j) { return featureMap(new FeatureMap(), j); }
  public FeatureMap featureMap(FeatureMap obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int featureMapLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createResponsePullWeight(FlatBufferBuilder builder,
      int retcode,
      int reasonOffset,
      int iteration,
      int feature_mapOffset) {
    builder.startObject(4);
    ResponsePullWeight.addFeatureMap(builder, feature_mapOffset);
    ResponsePullWeight.addIteration(builder, iteration);
    ResponsePullWeight.addReason(builder, reasonOffset);
    ResponsePullWeight.addRetcode(builder, retcode);
    return ResponsePullWeight.endResponsePullWeight(builder);
  }

  public static void startResponsePullWeight(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addRetcode(FlatBufferBuilder builder, int retcode) { builder.addInt(0, retcode, 0); }
  public static void addReason(FlatBufferBuilder builder, int reasonOffset) { builder.addOffset(1, reasonOffset, 0); }
  public static void addIteration(FlatBufferBuilder builder, int iteration) { builder.addInt(2, iteration, 0); }
  public static void addFeatureMap(FlatBufferBuilder builder, int featureMapOffset) { builder.addOffset(3, featureMapOffset, 0); }
  public static int createFeatureMapVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFeatureMapVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endResponsePullWeight(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

