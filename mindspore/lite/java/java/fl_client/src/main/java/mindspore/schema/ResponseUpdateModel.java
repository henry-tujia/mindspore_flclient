// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ResponseUpdateModel extends Table {
  public static ResponseUpdateModel getRootAsResponseUpdateModel(ByteBuffer _bb) { return getRootAsResponseUpdateModel(_bb, new ResponseUpdateModel()); }
  public static ResponseUpdateModel getRootAsResponseUpdateModel(ByteBuffer _bb, ResponseUpdateModel obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ResponseUpdateModel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int retcode() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String reason() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reasonAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer reasonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public FeatureMap featureMap(int j) { return featureMap(new FeatureMap(), j); }
  public FeatureMap featureMap(FeatureMap obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int featureMapLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public String nextReqTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextReqTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer nextReqTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String timestamp() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createResponseUpdateModel(FlatBufferBuilder builder,
      int retcode,
      int reasonOffset,
      int feature_mapOffset,
      int next_req_timeOffset,
      int timestampOffset) {
    builder.startObject(5);
    ResponseUpdateModel.addTimestamp(builder, timestampOffset);
    ResponseUpdateModel.addNextReqTime(builder, next_req_timeOffset);
    ResponseUpdateModel.addFeatureMap(builder, feature_mapOffset);
    ResponseUpdateModel.addReason(builder, reasonOffset);
    ResponseUpdateModel.addRetcode(builder, retcode);
    return ResponseUpdateModel.endResponseUpdateModel(builder);
  }

  public static void startResponseUpdateModel(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addRetcode(FlatBufferBuilder builder, int retcode) { builder.addInt(0, retcode, 0); }
  public static void addReason(FlatBufferBuilder builder, int reasonOffset) { builder.addOffset(1, reasonOffset, 0); }
  public static void addFeatureMap(FlatBufferBuilder builder, int featureMapOffset) { builder.addOffset(2, featureMapOffset, 0); }
  public static int createFeatureMapVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFeatureMapVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNextReqTime(FlatBufferBuilder builder, int nextReqTimeOffset) { builder.addOffset(3, nextReqTimeOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(4, timestampOffset, 0); }
  public static int endResponseUpdateModel(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

