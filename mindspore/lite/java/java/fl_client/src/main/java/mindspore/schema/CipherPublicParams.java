// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CipherPublicParams extends Table {
  public static CipherPublicParams getRootAsCipherPublicParams(ByteBuffer _bb) { return getRootAsCipherPublicParams(_bb, new CipherPublicParams()); }
  public static CipherPublicParams getRootAsCipherPublicParams(ByteBuffer _bb, CipherPublicParams obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public CipherPublicParams __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int t() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int p(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int pLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer pAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer pInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int g() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int prime(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int primeLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer primeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer primeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public float dpEps() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float dpDelta() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float dpNormClip() { int o = __offset(16); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public String encryptType() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer encryptTypeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer encryptTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static int createCipherPublicParams(FlatBufferBuilder builder,
      int t,
      int pOffset,
      int g,
      int primeOffset,
      float dp_eps,
      float dp_delta,
      float dp_norm_clip,
      int encrypt_typeOffset) {
    builder.startObject(8);
    CipherPublicParams.addEncryptType(builder, encrypt_typeOffset);
    CipherPublicParams.addDpNormClip(builder, dp_norm_clip);
    CipherPublicParams.addDpDelta(builder, dp_delta);
    CipherPublicParams.addDpEps(builder, dp_eps);
    CipherPublicParams.addPrime(builder, primeOffset);
    CipherPublicParams.addG(builder, g);
    CipherPublicParams.addP(builder, pOffset);
    CipherPublicParams.addT(builder, t);
    return CipherPublicParams.endCipherPublicParams(builder);
  }

  public static void startCipherPublicParams(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addT(FlatBufferBuilder builder, int t) { builder.addInt(0, t, 0); }
  public static void addP(FlatBufferBuilder builder, int pOffset) { builder.addOffset(1, pOffset, 0); }
  public static int createPVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startPVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addG(FlatBufferBuilder builder, int g) { builder.addInt(2, g, 0); }
  public static void addPrime(FlatBufferBuilder builder, int primeOffset) { builder.addOffset(3, primeOffset, 0); }
  public static int createPrimeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startPrimeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addDpEps(FlatBufferBuilder builder, float dpEps) { builder.addFloat(4, dpEps, 0.0f); }
  public static void addDpDelta(FlatBufferBuilder builder, float dpDelta) { builder.addFloat(5, dpDelta, 0.0f); }
  public static void addDpNormClip(FlatBufferBuilder builder, float dpNormClip) { builder.addFloat(6, dpNormClip, 0.0f); }
  public static void addEncryptType(FlatBufferBuilder builder, int encryptTypeOffset) { builder.addOffset(7, encryptTypeOffset, 0); }
  public static int endCipherPublicParams(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

