// automatically generated by the FlatBuffers compiler, do not modify

package mindspore.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RequestUploadTrainningTime extends Table {
  public static RequestUploadTrainningTime getRootAsRequestUploadTrainningTime(ByteBuffer _bb) { return getRootAsRequestUploadTrainningTime(_bb, new RequestUploadTrainningTime()); }
  public static RequestUploadTrainningTime getRootAsRequestUploadTrainningTime(ByteBuffer _bb, RequestUploadTrainningTime obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public RequestUploadTrainningTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String flName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer flNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String flId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer flIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int iteration() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String trainningTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trainningTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer trainningTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String timestamp() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createRequestUploadTrainningTime(FlatBufferBuilder builder,
      int fl_nameOffset,
      int fl_idOffset,
      int iteration,
      int trainning_timeOffset,
      int timestampOffset) {
    builder.startObject(5);
    RequestUploadTrainningTime.addTimestamp(builder, timestampOffset);
    RequestUploadTrainningTime.addTrainningTime(builder, trainning_timeOffset);
    RequestUploadTrainningTime.addIteration(builder, iteration);
    RequestUploadTrainningTime.addFlId(builder, fl_idOffset);
    RequestUploadTrainningTime.addFlName(builder, fl_nameOffset);
    return RequestUploadTrainningTime.endRequestUploadTrainningTime(builder);
  }

  public static void startRequestUploadTrainningTime(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addFlName(FlatBufferBuilder builder, int flNameOffset) { builder.addOffset(0, flNameOffset, 0); }
  public static void addFlId(FlatBufferBuilder builder, int flIdOffset) { builder.addOffset(1, flIdOffset, 0); }
  public static void addIteration(FlatBufferBuilder builder, int iteration) { builder.addInt(2, iteration, 0); }
  public static void addTrainningTime(FlatBufferBuilder builder, int trainningTimeOffset) { builder.addOffset(3, trainningTimeOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(4, timestampOffset, 0); }
  public static int endRequestUploadTrainningTime(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

